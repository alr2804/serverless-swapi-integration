service: sw-api

# frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: sa-east-1
  endpointType: regional  # Setting the API Gateway to be regional
  iamRoleStatements: # <-- Add this section
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        Fn::GetAtt:
          - SWAPITable
          - Arn
      


plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-openapi-documentation
  - serverless-aws-documentation

custom:
  documentation:
    api:
      info:
        version: "1.0.0"
        title: "Star Wars Planets API"
        description: "An API to manage data about planets in the Star Wars universe."
    models:
      - name: "Planet"
        description: "A Star Wars Planet"
        contentType: "application/json"
        schema:
          $ref: "./path_to_swagger_file.yml#/components/schemas/Planet"

# functions:
#   hello:
#     handler: handler.hello


# custom:
#   dynamodb:
#     start:
#       migrate: true

functions:
  fetchData:
    handler: handler.fetchData
    timeout: 15 
    events:
      - http:
          method: get
          path: fetch-data
          cors: true
  createData:
    handler: handler.createData
    events:
      - http:
          method: post
          path: character
          cors: true

  getAllData:
    handler: handler.getAllData
    events:
      - http:
          method: get
          path: characters
          cors: true

  getDataById:
    handler: handler.getDataById
    events:
      - http:
          method: get
          path: character/{id}
          cors: true

  updateData:
    handler: handler.updateData
    events:
      - http:
          method: put
          path: character/{id}
          cors: true

  deleteData:
    handler: handler.deleteData
    events:
      - http:
          method: delete
          path: character/{id}
          cors: true
  
  fetchPlanetsData:
    handler: handler.fetchPlanetsData
    timeout: 15 
    events:
      - http:
          path: planets/fetch
          method: get

  createPlanet:
    handler: handler.createPlanet
    events:
      - http:
          path: planets
          method: post
          cors: true
          
  getPlanetById:
    handler: handler.getPlanetById
    events:
      - http:
          path: planets/{id}
          method: get
          cors: true

  getAllPlanets:
    handler: handler.getAllPlanets
    events:
      - http:
          path: planets
          method: get
          cors: true

  updatePlanet:
    handler: handler.updatePlanet
    events:
      - http:
          path: planets/{id}
          method: put
          cors: true

  deletePlanet:
    handler: handler.deletePlanet
    events:
      - http:
          path: planets/{id}
          method: delete
          cors: true

resources:
  Resources:
    SWAPITable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "SWAPIPeople"
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "N"  # Note: Change 'S' to 'N' for numeric IDs
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    
    SWAPIPlanetsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: SWAPIPlanets
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5